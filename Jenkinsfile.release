@Library('jenkins-pipeline-shared-libraries')_

CREATE_RELEASE_BRANCHES = 'create-release-branches'
RUNTIMES_DEPLOY = 'kogito-runtimes-deploy'
OPTAPLANNER_DEPLOY = 'optaplanner-deploy'
EXAMPLES_DEPLOY = 'kogito-examples-deploy'
IMAGES_DEPLOY = 'kogito-images-deploy'
OPERATOR_DEPLOY = 'kogito-operator-deploy'
RUNTIMES_PROMOTE = 'kogito-runtimes-promote'
OPTAPLANNER_PROMOTE = 'optaplanner-promote'
EXAMPLES_PROMOTE = 'kogito-examples-promote'
IMAGES_PROMOTE = 'kogito-images-promote'
OPERATOR_PROMOTE = 'kogito-operator-promote'

PIPELINE_REPOS=['kogito-pipelines']
RUNTIMES_REPOS=['kogito-runtimes','kogito-apps','kogito-examples']
OPTAPLANNER_REPOS =['optaplanner', 'optaweb-vehicle-routing', 'optaweb-employee-rostering', 'optaplanner-quickstarts/development']
IMAGES_REPOS=['kogito-images']
OPERATOR_REPOS=['kogito-cloud-operator']

// Map of executed jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    parameters {
        booleanParam(name: 'CREATE_RELEASE_BRANCHES_ONLY', defaultValue: 'false', description: 'Set to true if only the create release branches stage should be launched')

        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Project version to release as Major.minor.micro')
        string(name: 'KOGITO_IMAGES_VERSION', defaultValue: '', description: 'To be set if different from PROJECT_VERSION. Should be only a bug fix update from PROJECT_VERSION.')
        string(name: 'KOGITO_OPERATOR_VERSION', defaultValue: '', description: 'To be set if different from PROJECT_VERSION. Should be only a bug fix update from PROJECT_VERSION.')
        string(name: 'OPTAPLANNER_VERSION', defaultValue: '', description: 'Project version of OptaPlanner and its examples to release as Major.minor.micro')
        string(name: 'OPTAPLANNER_RELEASE_BRANCH', defaultValue: '', description: 'Use to override the release branch name deduced from the OPTAPLANNER_VERSION')
        booleanParam(name: 'DEPLOY_AS_LATEST', defaultValue: 'false', description: 'Given project version is considered the latest version')

        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip all tests')

        string(name: 'ARTIFACTS_REPOSITORY', defaultValue: '', description: 'Override default. Provide a staging repository for artifacts to be deployed to')
        string(name: 'EXAMPLES_URI', defaultValue: '', description: 'Override default. Git uri to the kogito-examples repository to use for tests.')
        string(name: 'EXAMPLES_REF', defaultValue: '', description: 'Override default. Git reference (branch/tag) to the kogito-examples repository to use for tests.')

        booleanParam(name: 'SKIP_ARTIFACTS_DEPLOY', defaultValue: false, description: 'To skip all artifacts (runtimes, examples) Test & Deployment. If skipped, please provide `ARTIFACTS_REPOSITORY`')
        booleanParam(name: 'SKIP_ARTIFACTS_PROMOTE', defaultValue: false, description: 'To skip Runtimes Promote only. Automatically skipped if SKIP_ARTIFACTS_DEPLOY is true.')
        booleanParam(name: 'SKIP_IMAGES_DEPLOY', defaultValue: false, description: 'To skip Images Test & Deployment.')
        booleanParam(name: 'SKIP_IMAGES_PROMOTE', defaultValue: false, description: 'To skip Images Promote only. Automatically skipped if SKIP_IMAGES_DEPLOY is true')
        booleanParam(name: 'SKIP_OPERATOR_DEPLOY', defaultValue: false, description: 'To skip Operator Test & Deployment.')
        booleanParam(name: 'SKIP_OPERATOR_PROMOTE', defaultValue: false, description: 'To skip Operator Promote only. Automatically skipped if SKIP_OPERATOR_DEPLOY is true.')

        booleanParam(name: 'USE_TEMP_OPENSHIFT_REGISTRY', defaultValue: false, description: 'If enabled, use Openshift registry to push temporary images')
    }

    environment {
        //KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')
        KOGITO_CI_EMAIL_TO = credentials('DUPLIAKA_EMAIL')

        // RELEASE_BRANCH => will be set in Initialization phase

        // We use quay as temporary registry for testing between the jobs instead of Openshift, due to https://issues.redhat.com/browse/KOGITO-2219

       // IMAGE_REGISTRY_CREDENTIALS = 'release_kogito'
       // IMAGE_REGISTRY = 'quay.io'

        IMAGE_REGISTRY_CREDENTIALS = 'EMPTY_REGISTRY_CREDENTIALS'
        IMAGE_REGISTRY = 'EMPTY_REGISTRY'

        IMAGE_NAMESPACE = 'kiegroup'
        // Use nightly for now with a different tag but we should find another solution
        IMAGE_NAME_SUFFIX = 'nightly'

        // Credentials
        /*
        GIT_AUTHOR='kiegroup'
        GIT_AUTHOR_CREDS_ID = 'kie-ci' // username/password creds
        BOT_AUTHOR='bsig-gh-bot'
        BOT_AUTHOR_CREDS_ID='bsig-gh-bot' // username/password creds
        GITHUB_TOKEN_CREDS_ID='kie-ci2-token' // secret text creds
        */
        GIT_AUTHOR='dupliaka'
        GIT_AUTHOR_CREDS_ID = 'dupliaka' // username/password creds
        BOT_AUTHOR='dupliaka-gh-bot'
        BOT_AUTHOR_CREDS_ID='dupliaka-gh-bot' // username/password creds
        GITHUB_TOKEN_CREDS_ID='dupliaka_gh_token' // secret text creds

    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    assert getKogitoArtifactsVersion() != ''

                    // Set release branch
                    env.RELEASE_BRANCH = getBranchForVersion(getKogitoArtifactsVersion())
                    echo "Kogito Release Branch ${getReleaseBranch()}"

                    if(isArtifactsDeploy() || isArtifactsPromote()){
                        assert getOptaPlannerVersion() != ''
                        env.OPTAPLANNER_RELEASE_BRANCH = params.OPTAPLANNER_RELEASE_BRANCH ?: getBranchForVersion(getOptaPlannerVersion())
                        echo "OptaPlanner Release Branch ${getOptaPlannerReleaseBranch()}"
                    }

                    currentBuild.displayName = getDisplayName()

                    sendNotification("Release Pipeline on branch ${getReleaseBranch()} has started...\n=> ${env.BUILD_URL}")

                    // Safety measure to not publish to main JBoss
                    if(getGitAuthor() != 'kiegroup' && !getArtifactsRepositoryParam()){
                        sendNotification("Git Author is different from `kiegroup` and no `ARTIFACTS_REPOSITORY` parameter has been provided. Are you sure you want to continue ? => ${env.BUILD_URL}input")
                        input message: 'Should the pipeline continue with no `ARTIFACTS_REPOSITORY` defined ?', ok: 'Yes'
                    }
                }
            }
        }

        stage('Create Kogito release branches') {
            steps {
                script {
                    def buildParams = []
                    addDisplayNameParam(buildParams)
                    addStringParam(buildParams, 'RELEASE_BRANCH', getReleaseBranch())
                    addStringParam(buildParams, 'GIT_AUTHOR', getGitAuthor())
                    addStringParam(buildParams, 'GIT_AUTHOR_CREDS_ID', getGitAuthorCredsId())

                    def repositories = []
                    if(isArtifactsDeploy()) {
                        repositories += RUNTIMES_REPOS
                    }
                    if(isImagesDeploy()) {
                        repositories += IMAGES_REPOS
                    }
                    if(isOperatorDeploy()) {
                        repositories += OPERATOR_REPOS
                    }
                    repositories += PIPELINE_REPOS // Create branch to activate nightlies if needed

                    echo "Call ${CREATE_RELEASE_BRANCHES} job with repositories ${repositories}"
                    addStringParam(buildParams, 'REPOSITORIES', repositories.join(','))
                    buildJob(CREATE_RELEASE_BRANCHES, buildParams)

                    sendNotification("${getReleaseBranch()} branches have been created for repositories: ${repositories}")
                }
            }
        }

        stage('Create OptaPlanner release branches') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    def buildParams = []
                    addDisplayNameParam(buildParams, getDisplayName(getOptaPlannerReleaseBranch()))
                    addStringParam(buildParams, 'RELEASE_BRANCH', getOptaPlannerReleaseBranch())
                    addStringParam(buildParams, 'GIT_AUTHOR', getGitAuthor())
                    addStringParam(buildParams, 'GIT_AUTHOR_CREDS_ID', getGitAuthorCredsId())

                    def repositories = []
                    if(isArtifactsDeploy()) {
                        repositories += OPTAPLANNER_REPOS
                    }

                    echo "Call ${CREATE_RELEASE_BRANCHES} job with repositories ${repositories}"
                    addStringParam(buildParams, 'REPOSITORIES', repositories.join(','))
                    buildJob(CREATE_RELEASE_BRANCHES, buildParams)

                    sendNotification("${getOptaPlannerReleaseBranch()} branches have been created for repositories: ${repositories}")
                }
            }
        }

}

def buildJob(String jobName, List buildParams) {
    echo "Build ${jobName} with params ${buildParams}"
    
    def job = build(job: "./${jobName}", wait: true, parameters: buildParams, propagate: false)
    JOBS[jobName] = job

    def jobResult = job.getResult()
    def jobUrl = getJobUrl(jobName)
    if(jobResult != 'SUCCESS'){
        echo "Sending a notification about an unsuccessful job build ${jobName}."
        sendNotification("`${jobName}` finished with status `${jobResult}`.\nSee: ${jobUrl}\n\nPlease provide which action should be done (retry ? skip ? abort ?): ${env.BUILD_URL}input")

        // abort is handled automatically by the pipeline in the input
        def result = input message: "Job `${jobName}` is in status ${jobResult}. What do you want to do ?", parameters: [choice(name: 'ACTION', choices: ['retry', 'skip'].join('\n')), string(name: 'MESSAGE', description: 'If you want to add information to your action...')]
        String resultStr = "Decision was made to ${result['ACTION']} the job `${jobName}`."
        if(result['MESSAGE'] != ''){
            resultStr += "Additional Information: `${result['MESSAGE']}`"
        }
        echo resultStr
        sendNotification(resultStr)
        
        if(result['ACTION'] == 'retry') {
            return buildJob(jobName, buildParams)
        }
    }
    return job
}

def getJob(String jobName){
    return JOBS[jobName]
}

String getJobUrl(String jobName){
    echo "getJobUrl for ${jobName}"
    def job = getJob(jobName)
    return job ? job.getAbsoluteUrl() : ''
}

void sendErrorNotification(){
    sendNotification("Kogito release job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}")
}

void sendStageNotification() {
    sendNotification("${env.STAGE_NAME}")
}

void sendNotification(String body){
    echo "Send Notification"
    echo body
    emailext body: body, subject: "[${getReleaseBranch()}] Release Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

def readDeployProperties(String buildUrl){
    def deployProperties = [:]
    if (buildUrl != ''){
        if(!buildUrl.endsWith('/')){
            buildUrl += '/'
        }
        sh "wget ${buildUrl}artifact/deployment.properties -O deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
    return deployProperties
}

List getDefaultBuildParams(String version = '', String buildBranchName = ''){
    version = version ?: getKogitoArtifactsVersion()
    buildBranchName = buildBranchName ?: getReleaseBranch()

    List buildParams = []
    addDisplayNameParam(buildParams, getDisplayName(buildBranchName))
    addStringParam(buildParams, 'BUILD_BRANCH_NAME', buildBranchName)
    addStringParam(buildParams, 'GIT_AUTHOR', getGitAuthor())
    addBooleanParam(buildParams, 'RELEASE', true)
    addStringParam(buildParams, 'PROJECT_VERSION', version)
    return buildParams
}

void addDisplayNameParam(buildParams, name = ''){
    name = name ?: getDisplayName()
    addStringParam(buildParams, 'DISPLAY_NAME', name)
}

void addSkipTestsParam(buildParams){
    addBooleanParam(buildParams, 'SKIP_TESTS', params.SKIP_TESTS)
}

void addReleaseDeployGitParam(buildParams){
    addStringParam(buildParams, 'GIT_AUTHOR_BOT', env.BOT_AUTHOR)
    addStringParam(buildParams, 'BOT_CREDENTIALS_ID', env.BOT_AUTHOR_CREDS_ID)
}

void addReleasePromoteGitParam(buildParams){
    addStringParam(buildParams, 'BOT_CREDENTIALS_ID', env.BOT_AUTHOR_CREDS_ID)
    addStringParam(buildParams, 'AUTHOR_CREDS_ID', getGitAuthorCredsId())
    addStringParam(buildParams, 'GITHUB_TOKEN_CREDS_ID', env.GITHUB_TOKEN_CREDS_ID)
}

void addImageBuildParams(List buildParams = [], String paramsPrefix = '', String tag, boolean isRegistryIncluded = false, boolean isFinalImage = false){
    if (!isFinalImage && params.USE_TEMP_OPENSHIFT_REGISTRY) {
        addBooleanParam(buildParams, constructKey(paramsPrefix, 'IMAGE_USE_OPENSHIFT_REGISTRY'), true)
    } else if(isRegistryIncluded) {
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_REGISTRY_CREDENTIALS'), env.IMAGE_REGISTRY_CREDENTIALS)
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_REGISTRY'), env.IMAGE_REGISTRY)
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_NAMESPACE'), env.IMAGE_NAMESPACE)
    }
    if(!isFinalImage){
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_NAME_SUFFIX'), env.IMAGE_NAME_SUFFIX)
    }
    addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_TAG'), tag)
}

void addStringParam(List params, String key, String value){
    params.add(string(name: key, value: value))
}

void addBooleanParam(List params, String key, boolean value){
    params.add(booleanParam(name: key, value: value))
}

String constructKey(String prefix, String paramId){
    return prefix == null || prefix == '' ? paramId : "${prefix}_${paramId}"
}

String getDisplayName(branch = ''){
    branch = branch ?: getReleaseBranch()
    if(isCreateReleaseBranchesOnly()){
        return "Cut-off ${branch}"
    }
    return "Release ${branch}"
}

String getKogitoArtifactsVersion(){
    return params.PROJECT_VERSION
}

String getKogitoImagesVersion(){
    return params.KOGITO_IMAGES_VERSION ?: removeVersionSuffixIfExist(getKogitoArtifactsVersion())
}

String getKogitoOperatorVersion(){
    return params.KOGITO_OPERATOR_VERSION ?: removeVersionSuffixIfExist(getKogitoArtifactsVersion())
}

String getOptaPlannerVersion() {
    return params.OPTAPLANNER_VERSION
}

String getReleaseBranch(){
    return env.RELEASE_BRANCH
}

String getGitAuthor(){
    return env.GIT_AUTHOR
}

String getGitAuthorCredsId(){
    return env.GIT_AUTHOR_CREDS_ID
}

String getArtifactsRepositoryParam(){
    return params.ARTIFACTS_REPOSITORY
}

String getOptaPlannerReleaseBranch() {
    return env.OPTAPLANNER_RELEASE_BRANCH
}

boolean isArtifactsDeploy(){
    return !params.SKIP_ARTIFACTS_DEPLOY
}

boolean isCreateReleaseBranchesOnly(){
    return params.CREATE_RELEASE_BRANCHES_ONLY
}

boolean isImagesDeploy(){
    return !params.SKIP_IMAGES_DEPLOY
}

boolean isOperatorDeploy(){
    return !params.SKIP_OPERATOR_DEPLOY
}

boolean isArtifactsPromote(){
    return isArtifactsDeploy() && !params.SKIP_ARTIFACTS_PROMOTE
}

boolean isImagesPromote(){
    return isImagesDeploy() && !params.SKIP_IMAGES_PROMOTE
}

boolean isOperatorPromote(){
    return isOperatorDeploy() && !params.SKIP_OPERATOR_PROMOTE
}

String getBranchForVersion(String version) {
    Integer[] versionSplit = util.parseVersion(version)
    return "${versionSplit[0]}.${versionSplit[1]}.x"
}

String getKogitoImagesTempTag(){
    return "${getKogitoImagesVersion()}-temp"
}

String getKogitoOperatorTempTag(){
    return "${getKogitoOperatorVersion()}-temp"
}

String removeVersionSuffixIfExist(String version){
    Integer[] versionSplit = util.parseVersion(version)
    return "${versionSplit[0]}.${versionSplit[1]}.${versionSplit[2]}"
}